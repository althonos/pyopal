[metadata]
name = pyopal
version = attr: pyopal._version.__version__
author = Martin Larralde
author_email = martin.larralde@embl.de
url = https://github.com/althonos/pyopal
description = Cython bindings and Python interface to Opal, a SIMD-accelerated pairwise aligner.
long_description = file: README.md
long_description_content_type = text/markdown
license = MIT
platform = any
keywords = bioinformatics, pairwise, sequence, alignment, opal
classifier =
    Development Status :: 3 - Alpha
    Intended Audience :: Developers
    Intended Audience :: Science/Research
    License :: OSI Approved :: MIT License
    Operating System :: OS Independent
    Programming Language :: C
    Programming Language :: Cython
    Programming Language :: Python :: 3.6
    Programming Language :: Python :: 3.7
    Programming Language :: Python :: 3.8
    Programming Language :: Python :: 3.9
    Programming Language :: Python :: 3.10
    Programming Language :: Python :: Implementation :: CPython
    Programming Language :: Python :: Implementation :: PyPy
    Topic :: Scientific/Engineering :: Bio-Informatics
    Topic :: Scientific/Engineering :: Medical Science Apps.
    Typing :: Typed
project_urls =
    Documentation = https://pyopal.readthedocs.io/en/stable/
    Bug Tracker = https://github.com/althonos/pyopal/issues
    Changelog = https://github.com/althonos/pyopal/blob/main/CHANGELOG.md
    Coverage = https://codecov.io/gh/althonos/pyopal/
    Builds = https://github.com/althonos/pyopal/actions
    PyPI = https://pypi.org/project/pyopal

[options]
zip_safe = false
packages = pyopal, pyopal.tests, pyopal.tests.data
include_package_data = false
python_requires = >=3.5
setup_requires =
    setuptools >=46.4
    cython ~=0.29.16
tests_require =
    importlib-resources ; python_version < '3.7'

# [options.entry_points]
# console_scripts =
#     pyopal = pyopal.cli:main

[options.package_data]
pyopal = py.typed, *.pyi
pyopal.tests = requirements.txt
pyopal.tests.data = *

[coverage:run]
plugins = Cython.Coverage
include = pyopal/*.py, pyopal/*.pyx

[coverage:report]
include = pyopal/*
omit = pyopal/tests/*
show_missing = true
exclude_lines =
    pragma: no cover
    if typing.TYPE_CHECKING:
    @abc.abstractmethod
    @abc.abstractproperty
    raise NotImplementedError
    return NotImplemented
    raise MemoryError()

[pydocstyle]
inherit = false
ignore = D102,D105,D200,D203,D213,D406,D407
match-dir = (?!tests)(?!docs)[^\.].*
match = (?!test)(?!setup)[^\._].*\.py

[mypy]
disallow_any_decorated = true
disallow_any_generics = true
disallow_any_unimported = false
disallow_subclassing_any = false
disallow_untyped_calls = true
disallow_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_return_any = true
exclude = pyopal/tests/*

[mypy-pyopal.tests]
disallow_untyped_defs = false

[isort]
known_first_party = pyopal, opal
known_standard_library = cpython, cython, _unicode
known_third_party = libc, libcpp
line_length = 88
profile = black
skip_gitignore = true
skip_glob = vendor/opal/*
